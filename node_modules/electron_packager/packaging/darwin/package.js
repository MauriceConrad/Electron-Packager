const electronDownloader = require('electron-download');
const fs = require('fs-extra');
const DecompressZip = require('decompress-zip');
const asar = require('asar');
const plist = require('plist');

module.exports = {
  package: function(options, callback) {
    var self = module.exports;
    electronDownloader({
      version: options.version,
      arch: "x64",
      platform: options.platform,
      cache: "/tmp/electron_packager_downloads"
    }, function(err, path) {
      if (err) return callback(err);
      // Create package's directory
      var builDir = options.target + "/" + options.name + "-" + self.__platformName;
      // Empty the directory if it exists
      fs.emptyDirSync(builDir);
      // Create it if not
      fs.ensureDirSync(builDir);
      // Unzip downloaded electron bundle to output location
      var unzipper = new DecompressZip(path);
      unzipper.on("extract", function() {
        self.handle(builDir, options, callback);
      });
      unzipper.extract({
        path: builDir
      });
    });

  },
  handle: function(builDir, options, callback) {
    var appBundle = builDir + "/Electron.app";
    var newName = builDir + "/" + options.name + ".app";
    fs.renameSync(appBundle, newName);
    appBundle = newName;
    var appData = appBundle + "/Contents";
    if (!options.bundle) {
      fs.readFile(__dirname + "/resources/Bundle.json", "utf8", function(err, contents) {
        if (err) return callback(err);
        bundleHandle(JSON.parse(contents));
      });
    }
    else {
      bundleHandle(options.bundle);
    }
    function bundleHandle(bundle) {
      bundle.electron.version = "v" + options.version;
      fs.writeFile(appData + "/Bundle.json", JSON.stringify(bundle, null, 2), function(err) {
        if (err) return callback(err);
      });
      bundle.electron.resources.forEach(function(resource) {
        fs.remove(appData + "/" + resource, function(err) {
          if (err) return callback(err);
        });
      });
      fs.remove(appData + "/Resources/electron.icns", function(err) {
        if (err) return callback(err);
      });
      asar.createPackage(options.source, appData + "/Resources/default_app.asar", function(err) {
        if (err) return console.error(err);
      });
      fs.copySync(__dirname + "/resources/manage.py", appData + "/MacOS/manage.py");
      fs.copySync(__dirname + "/resources/Progress.app", appData + "/MacOS/Progress.app");

      if (options.icon) {
        var iconName = options.icon.split("/").last;
        fs.copySync(options.icon, appData + "/Resources/" + iconName)
      }

      fs.readFile(appData + "/Info.plist", "utf8", function(err, contents) {
        if (err) return callback(err);
        var plistContext = plist.parse(contents);
        plistContext["CFBundleExecutable"] = "manage.py";
        plistContext["CFBundleDisplayName"] = options.name;
        plistContext["CFBundleName"] = options.name;
        plistContext["CFBundleIdentifier"] = options.identifier;
        plistContext["CFBundleIconFile"] = options.icon ? iconName : false;

        fs.writeFile(appData + "/Info.plist", plist.build(plistContext), function(err) {
          if (err) return callback(err);
          callback(null, {
            success: true,
            path: newName
          });
        });
      })
    }
  },
  __platformName: "darwin"
}
Object.defineProperty(Array.prototype, "last", {
  get() {
    return this[this.length - 1];
  }
});
