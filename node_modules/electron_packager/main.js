const fs = require('fs-extra');
const request = require('./requester');

module.exports = {
  package: function(options, callback = function() {}) {
    var packageFile = options.source + "/package.json";
    // Read package.json
    fs.readFile(packageFile, "utf8", function(err, contents) {
      if (err) return console.error(err);
      var packageInfo = JSON.parse(contents);
      // Set defaults
      options = options.fillDefaults({
        name: packageInfo.name,
        platform: "darwin",
        icon: false,
        target: options.source + "/..",
        identifier: "author" in packageInfo ? ("com." + packageInfo.author.replace(/\s/g, "") + "." + packageInfo.name.replace(/\s/g, "")) : "com.Developer.ElectronApp",
        version: "latest",
        bundle: null
      });
      if (options.version === "latest") {
        request.get("https://registry.npmjs.org/electron", {}, function(err, response, body) {
          if (err) return console.error(err);
          var info = JSON.parse(body.toString());
          var latest = info["dist-tags"].latest;
          options.version = latest;
          optionsValid();
        });
      }
      else {
        optionsValid();
      }


      // Packaging
      function optionsValid() {
        // Package it
        var packagingModule = require(__dirname + "/packaging/" + options.platform + "/package.js");
        if (!packagingModule) {
          return console.error({
            error: "Packing method for platform '" + options.platform + "' was not found or is not function"
          });
        }
        packagingModule.package(options, function(err, result) {
          if (err) return console.error(err);
          if (result.success) {
            callback(null, {
              path: result.path
            });
          }
        });
      }

    });
  }
}


Object.prototype.fillDefaults = function (defaults) {
  var keys = Object.keys(defaults);
  for (var i = 0; i < keys.length; i++) {
    if (typeof defaults[keys[i]] == "object") this[keys[i]] = this[keys[i]] != undefined ? this[keys[i]].fillDefaults(defaults[keys[i]]) : defaults[keys[i]];
    else if (!this[keys[i]]) this[keys[i]] = defaults[keys[i]];
  }
  return this;
}
