const fs = require('fs-extra');
const electronDownloader = require('electron-download');
const DecompressZip = require('decompress-zip');
const plist = require('plist');
const https = require('https');
//const asar = require('asar');


module.exports = {
  package: function(options, callbacks) {
    console.log("\nRead project package.json");
    // Read package.json
    fs.readFile(options.source + "/package.json", "utf8", function(err, contents) {
      console.log("Done.");
      if (err) return console.error(err);
      var packageInfo = JSON.parse(contents);
      // Fill default options
      options.fillDefaults({
        name: packageInfo.name,
        platforms: "all",
        target: options.source + "/..",
        identifier: "com." + packageInfo.author.replace(/\s/g, "") + "." + packageInfo.name.replace(/\s/g, ""),
        icon: false,
        required: {}
      });
      // Check wether options.platforms is the string "all"
      if (options.platforms === "all") options.platforms = ["darwin", "win", "linux"];
      // Loop platforms
      options.platforms.forEach(function(platform) {
        packagePlatform(platform, options);
      });
    });
    function packagePlatform(platform, options) {
      // Define platform path
      var platformPath = options.target + "/" + options.name + "-build-" + platform;
      // Create directories if they don't exists
      fs.mkdirs(platformPath);
      platformBuilder[platform](platformPath, options);
    }
  }
}
var timer = {
  start: new Date().getTime(),
  curr: new Date().getTime(),
  finished: function(space) {
    timer.curr = new Date().getTime();
    console.log(space + "Finished in " + ((timer.curr - timer.start) / 1000) + " seconds.");
    timer.start = timer.curr;
  }
}
var platformDataFolder = __dirname + "/AppContents";
var platformBuilder = {
  darwin: function(dir, options) {
    var startTime = new Date().getTime();
    var currTime = startTime;
    var absStartTime = startTime;
    var platform = "darwin";
    console.log("\nPackaging Platform '" + platform + "':");
    // Empty directory
    fs.emptyDir(dir);
    console.log("\n  Get last electron version...");
    // Get latest version of electron
    https.request({
      method: "GET",
      host: "registry.npmjs.org",
      path: "/electron"
    }, function(response) {
      var result = "";
      response.on("data", function(chunk) {
        result += chunk;
      });
      response.on("end", function() {
        result = JSON.parse(result);
        var version = result["dist-tags"].latest;
        timer.finished("  ");
        console.log("\n  Get electron bundle v" + version + "...");
        // Download electron bundle to /tmp/electron_packager_downloads
        electronDownloader({
          version: version,
          arch: "x64",
          platform: platform,
          cache: "/tmp/electron_packager_downloads"
        }, function(err, path) {
          if (err) return console.error(err);
          timer.finished("  ");
          console.log("\n  Unzip Bundle...");
          // Unzip downloaded electron bundle to output location
          var unzipper = new DecompressZip(path);
          unzipper.on("extract", function() {
            timer.finished("  ");
            console.log("\n  Appending files and properties...");
            var appDir = dir + "/" + options.name + ".app";
            fs.rename(dir + "/Electron.app", appDir);
            var appBasePath = appDir + "/Contents";
            var platformResources = platformDataFolder + "/" + platform;
            // Append manage.py file to new app bundle
            fs.copy(platformResources + "/manage.py", appBasePath + "/MacOS/manage.py", function(err) {
              handleFinished();
            });
            fs.copy(platformResources + "/Downloader.app", appBasePath + "/MacOS/Downloader.app", function(err) {
              handleFinished();
            });
            // Append bundles
            fs.copy(options.source, appBasePath + "/Resources/electron_package", function(err) {
              handleFinished();
            });
            // Remove default electron icon
            fs.remove(appBasePath + "/Resources/electron.icns", function(err) {
              handleFinished();
            });
            // Append new icon
            var iconName = false;
            if (options.icon != false) {
              var iconPathParts = options.icon.split("/");
              iconName = iconPathParts[iconPathParts.length - 1];
              fs.copy(options.icon, appBasePath + "/Resources/" + iconName, function(err) {
                if (err) return console.error(err);
                handleFinished();
              });
            }
            // Read default Bundle.json
            fs.readFile(platformResources + "/Bundle.json", "utf8", function(err, contents) {
              if (err) return console.error(err);
              var bundleInfo = JSON.parse(contents);
              // If specific requirements are given for this platform, replace the default ones.
              if (platform in options.required) bundleInfo.resources = options.required[platform];
              // Loop resources
              bundleInfo.resources.forEach(function(requirement) {
                var resource = appBasePath + "/" + requirement.resource;
                // Remove resource from app bundle
                fs.remove(resource, function(err) {
                  //handleFinished();
                });
              });
              // Append Bundles.json to app bundle
              fs.writeFile(appBasePath + "/Bundle.json", JSON.stringify(bundleInfo, null, 2), function(err) {
                handleFinished();
              });
            });
            // Read default Info.plist
            fs.readFile(platformResources + "/Info.plist", "utf8", function(err, contents) {
              if (err) return console.error(err);
              // Parse Plist
              var plistContext = plist.parse(contents);
              // Add properties to plist
              plistContext["CFBundleDisplayName"] = options.name;
              plistContext["CFBundleName"] = options.name;
              plistContext["CFBundleIdentifier"] = options.identifier;
              plistContext["CFBundleIconFile"] = iconName;
              // Append Info.plist to app bundle
              fs.writeFile(appBasePath + "/Info.plist", plist.build(plistContext), function(err) {
                handleFinished();
              });
            });
            /*asar.createPackage(options.source, appBasePath + "/Resources/electron.asar", function() {
              //console.log('Created asar archive.');
            });
            asar.createPackage(options.source, appBasePath + "/Resources/default_app.asar", function() {
              //console.log('Created asar archive.');
            });*/
          });
          unzipper.extract({
            path: dir
          });
          var finishedProcesses = 0;
          function handleFinished() {
            finishedProcesses++;
            if (finishedProcesses >= 6) {
              timer.finished("  ");
              console.log("\nCreated package at '" + dir + "'\n");
            }
          }
        });
      });
    }).end();
  },
  win: function(dir, options) {

  },
  linux: function(dir, options) {

  }
}
Object.prototype.fillDefaults = function (defaults) {
  var keys = Object.keys(defaults);
  for (var i = 0; i < keys.length; i++) {
    if (typeof defaults[keys[i]] == "object") this[keys[i]] = this[keys[i]] != undefined ? this[keys[i]].fillDefaults(defaults[keys[i]]) : defaults[keys[i]];
    else if (!this[keys[i]]) this[keys[i]] = defaults[keys[i]];
  }
  return this;
}
/*options.fillDefaults({
  source: ".",
  target: options.source + "/package",
  name: packageInfo.name
});
fs.copy(__dirname + "/node_modules/electron/dist/Electron.app", options.target + "/" + options.name + ".app", function(err) {
  if (err) return console.error(err);
  console.log("Copied Electron.app Bundle");
});*/
